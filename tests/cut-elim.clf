i : type.
o : type.
and : o <- o <- o.
imp : o <- o <- o.
or : o <- o <- o.
not : o <- o.
true : o.
false : o.
forall : o <- (i -> o).
exists : o <- (i -> o).
hyp : o -> type.
conc : o -> type.
axiom : conc A <- hyp A.
andr : conc (A and B) <- conc B <- conc A.
andl1 : conc C <- hyp (A and B) <- (hyp A -> conc C).
andl2 : conc C <- hyp (A and B) <- (hyp B -> conc C).
impr : conc (A imp B) <- (hyp A -> conc B).
impl : conc C <- hyp (A imp B) <- (hyp B -> conc C) <- conc A.
orr1 : conc (A or B) <- conc A.
orr2 : conc (A or B) <- conc B.
orl : conc C <- hyp (A or B) <- (hyp B -> conc C) <- (hyp A -> conc C).
notr : conc (not A) <- (Pi p:o. hyp A -> conc p).
notl : conc C <- hyp (not A) <- conc A.
truer : conc true.
falsel : conc C <- hyp false.
forallr : conc (forall (\t:i. A t)) <- (Pi a:i. conc (A a)).
foralll : Pi T':i. conc C <- hyp (forall (\t:i. A t)) <- (hyp (A T') -> conc C).
existsr : Pi T':i. conc (exists (\t:i. A t)) <- conc (A T').
existsl : conc C <- hyp (exists (\t:i. A t)) <- (Pi a:i. hyp (A a) -> conc C).
thm : Pi A:o. Pi B:o. conc (A and B) -> conc (B and A) -> type.
pf : thm (andr D1 D2) (andr D2 D1).
d : Pi A1:o. conc (true and (A1 imp A1))
   = \A1:o. andr truer (impr (\h:hyp A1. axiom h)).
ex : Pi A1:o. thm d (andr (impr (\h:hyp A1. axiom h)) truer) = \A1:o. pf.
ca : Pi A:o. Pi B:o. conc A -> (hyp A -> conc B) -> conc B -> type.
# : type.
neg : o -> type.
pos : o -> type.
axiom' : # <- pos A <- neg A.
andr' : # <- pos (A and B) <- (pos B -> #) <- (pos A -> #).
andl1' : # <- neg (A and B) <- (neg A -> #).
andl2' : # <- neg (A and B) <- (neg B -> #).
impr' : # <- pos (A imp B) <- (neg A -> pos B -> #).
impl' : # <- neg (A imp B) <- (neg B -> #) <- (pos A -> #).
orr1' : # <- pos (A or B) <- (pos A -> #).
orr2' : # <- pos (A or B) <- (pos B -> #).
orl' : # <- neg (A or B) <- (neg B -> #) <- (neg A -> #).
notr' : # <- pos (not A) <- (neg A -> #).
notl' : # <- neg (not A) <- (pos A -> #).
truer' : # <- pos true.
falsel' : # <- neg false.
forallr' : # <- pos (forall (\t:i. A t)) <- (Pi a:i. pos (A a) -> #).
foralll' : Pi T':i. # <- neg (forall (\t:i. A t)) <- (neg (A T') -> #).
existsr' : Pi T':i. # <- pos (exists (\t:i. A t)) <- (pos (A T') -> #).
existsl' : # <- neg (exists (\t:i. A t)) <- (Pi a:i. neg (A a) -> #).
ca : Pi C:o. Pi A:o. conc A -> (hyp A -> conc C) -> conc C -> type.
ca_axiom_l : ca A (axiom H) (\h:hyp A. E h) (E H).
ca_axiom_r : ca A D (\h:hyp A. axiom h) D.
ca_and1 :
   ca (A2 and A3) (andr D1 D2)
      (\h:hyp (A2 and A3). andl1 (\h1:hyp A2. E1 h h1) h) F
      <- (Pi h1:hyp A2.
             ca (A2 and A3) (andr D1 D2) (\h:hyp (A2 and A3). E1 h h1) (E1' h1))
      <- ca A2 D1 (\h:hyp A2. E1' h) F.
ca_and2 :
   ca (A3 and A2) (andr D1 D2)
      (\h:hyp (A3 and A2). andl2 (\h1:hyp A2. E2 h h1) h) F
      <- (Pi h2:hyp A2.
             ca (A3 and A2) (andr D1 D2) (\h:hyp (A3 and A2). E2 h h2) (E2' h2))
      <- ca A2 D2 (\h:hyp A2. E2' h) F.
ca_imp :
   ca (A3 imp A2) (impr (\h:hyp A3. D2 h))
      (\h:hyp (A3 imp A2). impl (E1 h) (\h1:hyp A2. E2 h h1) h) F
      <- ca (A3 imp A2) (impr (\h:hyp A3. D2 h)) (\h:hyp (A3 imp A2). E1 h) E1'
      <- (Pi h2:hyp A2.
             ca (A3 imp A2) (impr (\h:hyp A3. D2 h))
                (\h:hyp (A3 imp A2). E2 h h2) (E2' h2))
      <- ca A3 E1' (\h:hyp A3. D2 h) D2'
      <- ca A2 D2' (\h:hyp A2. E2' h) F.
ca_or1 :
   ca (A2 or A3) (orr1 D1)
      (\h:hyp (A2 or A3). orl (\h1:hyp A2. E1 h h1) (\h1:hyp A3. E2 h h1) h) F
      <- (Pi h1:hyp A2.
             ca (A2 or A3) (orr1 D1) (\h:hyp (A2 or A3). E1 h h1) (E1' h1))
      <- ca A2 D1 (\h:hyp A2. E1' h) F.
ca_or2 :
   ca (A3 or A2) (orr2 D2)
      (\h:hyp (A3 or A2). orl (\h1:hyp A3. E1 h h1) (\h1:hyp A2. E2 h h1) h) F
      <- (Pi h2:hyp A2.
             ca (A3 or A2) (orr2 D2) (\h:hyp (A3 or A2). E2 h h2) (E2' h2))
      <- ca A2 D2 (\h:hyp A2. E2' h) F.
ca_not :
   ca (not A1) (notr (\p:o. \h:hyp A1. D1 p h)) (\h:hyp (not A1). notl (E1 h) h)
      (F2 C)
      <- ca (not A1) (notr (\p:o. \h:hyp A1. D1 p h)) (\h:hyp (not A1). E1 h) F1
      <- (Pi p:o. ca A1 F1 (\h1:hyp A1. D1 p h1) (F2 p)).
ca_forall :
   ca (forall (\t:i. A2 t)) (forallr (\a:i. D1 a))
      (\h:hyp (forall (\t:i. A2 t)). foralll T' (\h1:hyp (A2 T'). E1 h h1) h) F
      <- (Pi h2:hyp (A2 T').
             ca (forall (\t:i. A2 t)) (forallr (\a:i. D1 a))
                (\h:hyp (forall (\t:i. A2 t)). E1 h h2) (E1' h2))
      <- ca (A2 T') (D1 T') (\h:hyp (A2 T'). E1' h) F.
ca_exists :
   ca (exists (\t:i. A2 t)) (existsr T' D1)
      (\h:hyp (exists (\t:i. A2 t)). existsl (\a:i. \h1:hyp (A2 a). E1 h a h1) h)
      F
      <- (Pi a:i. Pi h1:hyp (A2 a).
             ca (exists (\t:i. A2 t)) (existsr T' D1)
                (\h:hyp (exists (\t:i. A2 t)). E1 h a h1) (E1' a h1))
      <- ca (A2 T') D1 (\h:hyp (A2 T'). E1' T' h) F.
cal_andl1 :
   ca A (andl1 (\h:hyp B1. D1 h) H) (\h:hyp A. E h) (andl1 (\h:hyp B1. D1' h) H)
      <- (Pi h1:hyp B1. ca A (D1 h1) (\h:hyp A. E h) (D1' h1)).
cal_andl2 :
   ca A (andl2 (\h:hyp B2. D2 h) H) (\h:hyp A. E h) (andl2 (\h:hyp B2. D2' h) H)
      <- (Pi h2:hyp B2. ca A (D2 h2) (\h:hyp A. E h) (D2' h2)).
cal_impl :
   ca A (impl D1 (\h:hyp B2. D2 h) H) (\h:hyp A. E h)
      (impl D1 (\h:hyp B2. D2' h) H)
      <- (Pi h2:hyp B2. ca A (D2 h2) (\h:hyp A. E h) (D2' h2)).
cal_orl :
   ca A (orl (\h:hyp B1. D1 h) (\h:hyp B2. D2 h) H) (\h:hyp A. E h)
      (orl (\h:hyp B1. D1' h) (\h:hyp B2. D2' h) H)
      <- (Pi h1:hyp B1. ca A (D1 h1) (\h:hyp A. E h) (D1' h1))
      <- (Pi h2:hyp B2. ca A (D2 h2) (\h:hyp A. E h) (D2' h2)).
cal_notl : ca A (notl D1 H) (\h:hyp A. E h) (notl D1 H).
cal_falsel : ca A (falsel H) (\h:hyp A. E h) (falsel H).
cal_foralll :
   ca A (foralll T' (\h:hyp (A1 T'). D1 h) H) (\h:hyp A. E h)
      (foralll T' (\h:hyp (A1 T'). D1' h) H)
      <- (Pi h:hyp (A1 T'). ca A (D1 h) (\h1:hyp A. E h1) (D1' h)).
cal_existsl :
   ca A (existsl (\a:i. \h:hyp (B1 a). D1 a h) H) (\h:hyp A. E h)
      (existsl (\a:i. \h:hyp (B1 a). D1' a h) H)
      <- (Pi a:i. Pi h:hyp (B1 a). ca A (D1 a h) (\h1:hyp A. E h1) (D1' a h)).
car_axiom : ca A D (\h:hyp A. axiom H1) (axiom H1).
car_andr :
   ca A D (\h:hyp A. andr (E1 h) (E2 h)) (andr E1' E2')
      <- ca A D (\h:hyp A. E1 h) E1'
      <- ca A D (\h:hyp A. E2 h) E2'.
car_andl1 :
   ca A D (\h:hyp A. andl1 (\h1:hyp B1. E1 h h1) H) (andl1 (\h:hyp B1. E1' h) H)
      <- (Pi h1:hyp B1. ca A D (\h:hyp A. E1 h h1) (E1' h1)).
car_andl2 :
   ca A D (\h:hyp A. andl2 (\h1:hyp B2. E2 h h1) H) (andl2 (\h:hyp B2. E2' h) H)
      <- (Pi h2:hyp B2. ca A D (\h:hyp A. E2 h h2) (E2' h2)).
car_impr :
   ca A D (\h:hyp A. impr (\h1:hyp B1. E2 h h1)) (impr (\h:hyp B1. E2' h))
      <- (Pi h1:hyp B1. ca A D (\h:hyp A. E2 h h1) (E2' h1)).
car_impl :
   ca A D (\h:hyp A. impl (E1 h) (\h1:hyp B2. E2 h h1) H)
      (impl E1' (\h:hyp B2. E2' h) H)
      <- ca A D (\h:hyp A. E1 h) E1'
      <- (Pi h2:hyp B2. ca A D (\h:hyp A. E2 h h2) (E2' h2)).
car_orr1 :
   ca A D (\h:hyp A. orr1 (E1 h)) (orr1 E1') <- ca A D (\h:hyp A. E1 h) E1'.
car_orr2 :
   ca A D (\h:hyp A. orr2 (E2 h)) (orr2 E2') <- ca A D (\h:hyp A. E2 h) E2'.
car_orl :
   ca A D (\h:hyp A. orl (\h1:hyp B1. E1 h h1) (\h1:hyp B2. E2 h h1) H)
      (orl (\h:hyp B1. E1' h) (\h:hyp B2. E2' h) H)
      <- (Pi h1:hyp B1. ca A D (\h:hyp A. E1 h h1) (E1' h1))
      <- (Pi h2:hyp B2. ca A D (\h:hyp A. E2 h h2) (E2' h2)).
car_notr :
   ca A D (\h:hyp A. notr (\p:o. \h1:hyp B1. E1 h p h1))
      (notr (\p:o. \h:hyp B1. E1' p h))
      <- (Pi p:o. Pi h1:hyp B1. ca A D (\h:hyp A. E1 h p h1) (E1' p h1)).
car_notl :
   ca A D (\h:hyp A. notl (E1 h) H) (notl E1' H) <- ca A D (\h:hyp A. E1 h) E1'.
car_truer : ca A D (\h:hyp A. truer) truer.
car_falsel : ca A D (\h:hyp A. falsel H) (falsel H).
car_forallr :
   ca A D (\h:hyp A. forallr (\a:i. E1 h a)) (forallr (\a:i. E1' a))
      <- (Pi a:i. ca A D (\h:hyp A. E1 h a) (E1' a)).
car_foralll :
   ca A D (\h:hyp A. foralll T' (\h1:hyp (A1 T'). E1 h h1) H)
      (foralll T' (\h:hyp (A1 T'). E1' h) H)
      <- (Pi h1:hyp (A1 T'). ca A D (\h:hyp A. E1 h h1) (E1' h1)).
car_existsr :
   ca A D (\h:hyp A. existsr T' (E1 h)) (existsr T' E1')
      <- ca A D (\h:hyp A. E1 h) E1'.
car_existsl :
   ca A D (\h:hyp A. existsl (\a:i. \h1:hyp (B1 a). E1 h a h1) H)
      (existsl (\a:i. \h:hyp (B1 a). E1' a h) H)
      <- (Pi a:i. Pi h1:hyp (B1 a). ca A D (\h:hyp A. E1 h a h1) (E1' a h1)).



ca' : Pi A:o. (pos A -> #) -> (neg A -> #) -> # -> type.
ca_axiom'l : ca' A (\p:pos A. axiom' N p) (\n:neg A. E n) (E N).
ca_axiom'r : ca' A (\p:pos A. D p) (\n:neg A. axiom' n P) (D P).
ca_and1' :
   ca' (A and B)
      (\p:pos (A and B). andr' (\p1:pos A. D1 p p1) (\p1:pos B. D2 p p1) p)
      (\n:neg (A and B). andl1' (\n1:neg A. E1 n n1) n) F
      <- (Pi p1:pos A.
             ca' (A and B) (\p:pos (A and B). D1 p p1)
                (\n:neg (A and B). andl1' (\n1:neg A. E1 n n1) n) (D1' p1))
      <- (Pi n1:neg A.
             ca' (A and B)
                (\p:pos (A and B).
                    andr' (\p1:pos A. D1 p p1) (\p1:pos B. D2 p p1) p)
                (\n:neg (A and B). E1 n n1) (E1' n1))
      <- ca' A (\p1:pos A. D1' p1) (\n1:neg A. E1' n1) F.
ca_and2' :
   ca' (A and B)
      (\p:pos (A and B). andr' (\p1:pos A. D1 p p1) (\p1:pos B. D2 p p1) p)
      (\n:neg (A and B). andl2' (\n1:neg B. E2 n n1) n) F
      <- (Pi p2:pos B.
             ca' (A and B) (\p:pos (A and B). D2 p p2)
                (\n:neg (A and B). andl2' (\n1:neg B. E2 n n1) n) (D2' p2))
      <- (Pi n2:neg B.
             ca' (A and B)
                (\p:pos (A and B).
                    andr' (\p1:pos A. D1 p p1) (\p1:pos B. D2 p p1) p)
                (\n:neg (A and B). E2 n n2) (E2' n2))
      <- ca' B (\p2:pos B. D2' p2) (\n2:neg B. E2' n2) F.
ca_imp' :
   ca' (A imp B) (\p:pos (A imp B). impr' (\n:neg A. \p1:pos B. D1 p n p1) p)
      (\n:neg (A imp B). impl' (\p:pos A. E1 n p) (\n1:neg B. E2 n n1) n) F
      <- (Pi p1:pos A.
             ca' (A imp B)
                (\p:pos (A imp B). impr' (\n:neg A. \p2:pos B. D1 p n p2) p)
                (\n:neg (A imp B). E1 n p1) (E1' p1))
      <- (Pi n2:neg B.
             ca' (A imp B)
                (\p:pos (A imp B). impr' (\n:neg A. \p1:pos B. D1 p n p1) p)
                (\n:neg (A imp B). E2 n n2) (E2' n2))
      <- (Pi n1:neg A. Pi p2:pos B.
             ca' (A imp B) (\p:pos (A imp B). D1 p n1 p2)
                (\n:neg (A imp B).
                    impl' (\p:pos A. E1 n p) (\n2:neg B. E2 n n2) n) (D1' n1 p2))
      <- (Pi p2:pos B. ca' A (\p1:pos A. E1' p1) (\n1:neg A. D1' n1 p2) (F2 p2))
      <- ca' B (\p2:pos B. F2 p2) (\n2:neg B. E2' n2) F.
ca_or1' :
   ca' (A or B) (\p:pos (A or B). orr1' (\p1:pos A. D1 p p1) p)
      (\n:neg (A or B). orl' (\n1:neg A. E1 n n1) (\n1:neg B. E2 n n1) n) F
      <- (Pi n1:neg A.
             ca' (A or B) (\p:pos (A or B). orr1' (\p1:pos A. D1 p p1) p)
                (\n:neg (A or B). E1 n n1) (E1' n1))
      <- (Pi p1:pos A.
             ca' (A or B) (\p:pos (A or B). D1 p p1)
                (\n:neg (A or B).
                    orl' (\n1:neg A. E1 n n1) (\n1:neg B. E2 n n1) n) (D1' p1))
      <- ca' A (\p:pos A. D1' p) (\n:neg A. E1' n) F.
ca_or2' :
   ca' (A or B) (\p:pos (A or B). orr2' (\p1:pos B. D2 p p1) p)
      (\n:neg (A or B). orl' (\n1:neg A. E1 n n1) (\n1:neg B. E2 n n1) n) F
      <- (Pi n2:neg B.
             ca' (A or B) (\p:pos (A or B). orr2' (\p1:pos B. D2 p p1) p)
                (\n:neg (A or B). E2 n n2) (E2' n2))
      <- (Pi p2:pos B.
             ca' (A or B) (\p:pos (A or B). D2 p p2)
                (\n:neg (A or B).
                    orl' (\n1:neg A. E1 n n1) (\n1:neg B. E2 n n1) n) (D2' p2))
      <- ca' B (\p:pos B. D2' p) (\n:neg B. E2' n) F.
ca_not' :
   ca' (not A) (\p:pos (not A). notr' (\n:neg A. D1 p n) p)
      (\n:neg (not A). notl' (\p:pos A. E1 n p) n) F
      <- (Pi p1:pos A.
             ca' (not A) (\p:pos (not A). notr' (\n:neg A. D1 p n) p)
                (\n:neg (not A). E1 n p1) (E1' p1))
      <- (Pi n1:neg A.
             ca' (not A) (\p:pos (not A). D1 p n1)
                (\n:neg (not A). notl' (\p:pos A. E1 n p) n) (D1' n1))
      <- ca' A (\p:pos A. E1' p) (\n:neg A. D1' n) F.
ca_forall' :
   ca' (forall (\t:i. A t))
      (\p:pos (forall (\t:i. A t)). forallr' (\a:i. \p1:pos (A a). D1 p a p1) p)
      (\n:neg (forall (\t:i. A t)). foralll' T' (\n1:neg (A T'). E1 n n1) n) F
      <- (Pi n1:neg (A T').
             ca' (forall (\t:i. A t))
                (\p:pos (forall (\t:i. A t)).
                    forallr' (\a:i. \p1:pos (A a). D1 p a p1) p)
                (\n:neg (forall (\t:i. A t)). E1 n n1) (E1' n1))
      <- (Pi p1:pos (A T').
             ca' (forall (\t:i. A t)) (\p:pos (forall (\t:i. A t)). D1 p T' p1)
                (\n:neg (forall (\t:i. A t)).
                    foralll' T' (\n1:neg (A T'). E1 n n1) n) (D1' p1))
      <- ca' (A T') (\p:pos (A T'). D1' p) (\n:neg (A T'). E1' n) F.
ca_exists' :
   ca' (exists (\t:i. A t))
      (\p:pos (exists (\t:i. A t)). existsr' T' (\p1:pos (A T'). D1 p p1) p)
      (\n:neg (exists (\t:i. A t)). existsl' (\a:i. \n1:neg (A a). E1 n a n1) n)
      F
      <- (Pi n1:neg (A T').
             ca' (exists (\t:i. A t))
                (\p:pos (exists (\t:i. A t)).
                    existsr' T' (\p1:pos (A T'). D1 p p1) p)
                (\n:neg (exists (\t:i. A t)). E1 n T' n1) (E1' n1))
      <- (Pi p1:pos (A T').
             ca' (exists (\t:i. A t)) (\p:pos (exists (\t:i. A t)). D1 p p1)
                (\n:neg (exists (\t:i. A t)).
                    existsl' (\a:i. \n1:neg (A a). E1 n a n1) n) (D1' p1))
      <- ca' (A T') (\p:pos (A T'). D1' p) (\n:neg (A T'). E1' n) F.
car_axiom' : ca' A (\p:pos A. D p) (\n:neg A. axiom' N P) (axiom' N P).
car_andr' :
   ca' A (\p:pos A. D p)
      (\n:neg A. andr' (\p:pos B1. E1 n p) (\p:pos B2. E2 n p) P)
      (andr' (\p:pos B1. F1 p) (\p:pos B2. F2 p) P)
      <- (Pi p1:pos B1. ca' A (\p:pos A. D p) (\n:neg A. E1 n p1) (F1 p1))
      <- (Pi p2:pos B2. ca' A (\p:pos A. D p) (\n:neg A. E2 n p2) (F2 p2)).
car_andl1' :
   ca' A (\p:pos A. D p) (\n:neg A. andl1' (\n1:neg B1. E1 n n1) N)
      (andl1' (\n:neg B1. F1 n) N)
      <- (Pi n1:neg B1. ca' A (\p:pos A. D p) (\n:neg A. E1 n n1) (F1 n1)).
car_andl2' :
   ca' A (\p:pos A. D p) (\n:neg A. andl2' (\n1:neg B2. E2 n n1) N)
      (andl2' (\n:neg B2. F2 n) N)
      <- (Pi n2:neg B2. ca' A (\p:pos A. D p) (\n:neg A. E2 n n2) (F2 n2)).
car_impr' :
   ca' A (\p:pos A. D p) (\n:neg A. impr' (\n1:neg B1. \p:pos B2. E1 n n1 p) P)
      (impr' (\n:neg B1. \p:pos B2. F1 n p) P)
      <- (Pi n1:neg B1. Pi p2:pos B2.
             ca' A (\p:pos A. D p) (\n:neg A. E1 n n1 p2) (F1 n1 p2)).
car_impl' :
   ca' A (\p:pos A. D p)
      (\n:neg A. impl' (\p:pos B1. E1 n p) (\n1:neg B2. E2 n n1) N)
      (impl' (\p:pos B1. F1 p) (\n:neg B2. F2 n) N)
      <- (Pi p1:pos B1. ca' A (\p:pos A. D p) (\n:neg A. E1 n p1) (F1 p1))
      <- (Pi n2:neg B2. ca' A (\p:pos A. D p) (\n:neg A. E2 n n2) (F2 n2)).
car_orr1' :
   ca' A (\p:pos A. D p) (\n:neg A. orr1' (\p:pos B1. E1 n p) P)
      (orr1' (\p:pos B1. F1 p) P)
      <- (Pi p1:pos B1. ca' A (\p:pos A. D p) (\n:neg A. E1 n p1) (F1 p1)).
car_orr2' :
   ca' A (\p:pos A. D p) (\n:neg A. orr2' (\p:pos B2. E2 n p) P)
      (orr2' (\p:pos B2. F2 p) P)
      <- (Pi p2:pos B2. ca' A (\p:pos A. D p) (\n:neg A. E2 n p2) (F2 p2)).
car_orl' :
   ca' A (\p:pos A. D p)
      (\n:neg A. orl' (\n1:neg B1. E1 n n1) (\n1:neg B2. E2 n n1) N)
      (orl' (\n:neg B1. F1 n) (\n:neg B2. F2 n) N)
      <- (Pi n1:neg B1. ca' A (\p:pos A. D p) (\n:neg A. E1 n n1) (F1 n1))
      <- (Pi n2:neg B2. ca' A (\p:pos A. D p) (\n:neg A. E2 n n2) (F2 n2)).
car_notr' :
   ca' A (\p:pos A. D p) (\n:neg A. notr' (\n1:neg B1. E1 n n1) P)
      (notr' (\n:neg B1. F1 n) P)
      <- (Pi n1:neg B1. ca' A (\p:pos A. D p) (\n:neg A. E1 n n1) (F1 n1)).
car_notl' :
   ca' A (\p:pos A. D p) (\n:neg A. notl' (\p:pos B1. E1 n p) N)
      (notl' (\p:pos B1. F1 p) N)
      <- (Pi p1:pos B1. ca' A (\p:pos A. D p) (\n:neg A. E1 n p1) (F1 p1)).
car_truer' : ca' A (\p:pos A. D p) (\n:neg A. truer' P) (truer' P).
car_falsel' : ca' A (\p:pos A. D p) (\n:neg A. falsel' N) (falsel' N).
car_forallr' :
   ca' A (\p:pos A. D p) (\n:neg A. forallr' (\a:i. \p:pos (B1 a). E1 n a p) P)
      (forallr' (\a:i. \p:pos (B1 a). F1 a p) P)
      <- (Pi a:i. Pi p1:pos (B1 a).
             ca' A (\p:pos A. D p) (\n:neg A. E1 n a p1) (F1 a p1)).
car_foralll' :
   ca' A (\p:pos A. D p) (\n:neg A. foralll' T' (\n1:neg (A1 T'). E1 n n1) N)
      (foralll' T' (\n:neg (A1 T'). F1 n) N)
      <- (Pi n1:neg (A1 T'). ca' A (\p:pos A. D p) (\n:neg A. E1 n n1) (F1 n1)).
car_existsr' :
   ca' A (\p:pos A. D p) (\n:neg A. existsr' T' (\p:pos (A1 T'). E1 n p) P)
      (existsr' T' (\p:pos (A1 T'). F1 p) P)
      <- (Pi p1:pos (A1 T'). ca' A (\p:pos A. D p) (\n:neg A. E1 n p1) (F1 p1)).
car_existsl' :
   ca' A (\p:pos A. D p)
      (\n:neg A. existsl' (\a:i. \n1:neg (B1 a). E1 n a n1) N)
      (existsl' (\a:i. \n:neg (B1 a). F1 a n) N)
      <- (Pi a:i. Pi n1:neg (B1 a).
             ca' A (\p:pos A. D p) (\n:neg A. E1 n a n1) (F1 a n1)).
cal_axiom' : ca' A (\p:pos A. axiom' N P) (\n:neg A. E n) (axiom' N P).
cal_andr' :
   ca' A (\p:pos A. andr' (\p1:pos B1. D1 p p1) (\p1:pos B2. D2 p p1) P)
      (\n:neg A. E n) (andr' (\p:pos B1. F1 p) (\p:pos B2. F2 p) P)
      <- (Pi p1:pos B1. ca' A (\p:pos A. D1 p p1) (\n:neg A. E n) (F1 p1))
      <- (Pi p2:pos B2. ca' A (\p:pos A. D2 p p2) (\n:neg A. E n) (F2 p2)).
cal_andl1' :
   ca' A (\p:pos A. andl1' (\n:neg B1. D1 p n) N) (\n:neg A. E n)
      (andl1' (\n:neg B1. F1 n) N)
      <- (Pi n1:neg B1. ca' A (\p:pos A. D1 p n1) (\n:neg A. E n) (F1 n1)).
cal_andl2' :
   ca' A (\p:pos A. andl2' (\n:neg B2. D2 p n) N) (\n:neg A. E n)
      (andl2' (\n:neg B2. F2 n) N)
      <- (Pi n2:neg B2. ca' A (\p:pos A. D2 p n2) (\n:neg A. E n) (F2 n2)).
cal_impr' :
   ca' A (\p:pos A. impr' (\n:neg B1. \p1:pos B2. D1 p n p1) P) (\n:neg A. E n)
      (impr' (\n:neg B1. \p:pos B2. F1 n p) P)
      <- (Pi n1:neg B1. Pi p2:pos B2.
             ca' A (\p:pos A. D1 p n1 p2) (\n:neg A. E n) (F1 n1 p2)).
cal_impl' :
   ca' A (\p:pos A. impl' (\p1:pos B1. D1 p p1) (\n:neg B2. D2 p n) N)
      (\n:neg A. E n) (impl' (\p:pos B1. F1 p) (\n:neg B2. F2 n) N)
      <- (Pi p1:pos B1. ca' A (\p:pos A. D1 p p1) (\n:neg A. E n) (F1 p1))
      <- (Pi n2:neg B2. ca' A (\p:pos A. D2 p n2) (\n:neg A. E n) (F2 n2)).
cal_orr1' :
   ca' A (\p:pos A. orr1' (\p1:pos B1. D1 p p1) P) (\n:neg A. E n)
      (orr1' (\p:pos B1. F1 p) P)
      <- (Pi p1:pos B1. ca' A (\p:pos A. D1 p p1) (\n:neg A. E n) (F1 p1)).
cal_orr2' :
   ca' A (\p:pos A. orr2' (\p1:pos B2. D2 p p1) P) (\n:neg A. E n)
      (orr2' (\p:pos B2. F2 p) P)
      <- (Pi p2:pos B2. ca' A (\p:pos A. D2 p p2) (\n:neg A. E n) (F2 p2)).
cal_orl' :
   ca' A (\p:pos A. orl' (\n:neg B1. D1 p n) (\n:neg B2. D2 p n) N)
      (\n:neg A. E n) (orl' (\n:neg B1. F1 n) (\n:neg B2. F2 n) N)
      <- (Pi n1:neg B1. ca' A (\p:pos A. D1 p n1) (\n:neg A. E n) (F1 n1))
      <- (Pi n2:neg B2. ca' A (\p:pos A. D2 p n2) (\n:neg A. E n) (F2 n2)).
cal_notr' :
   ca' A (\p:pos A. notr' (\n:neg B1. D1 p n) P) (\n:neg A. E n)
      (notr' (\n:neg B1. F1 n) P)
      <- (Pi n1:neg B1. ca' A (\p:pos A. D1 p n1) (\n:neg A. E n) (F1 n1)).
cal_notl' :
   ca' A (\p:pos A. notl' (\p1:pos B1. D1 p p1) N) (\n:neg A. E n)
      (notl' (\p:pos B1. F1 p) N)
      <- (Pi p1:pos B1. ca' A (\p:pos A. D1 p p1) (\n:neg A. E n) (F1 p1)).
cal_truer' : ca' A (\p:pos A. truer' P) (\n:neg A. E n) (truer' P).
cal_falsel' : ca' A (\p:pos A. falsel' N) (\n:neg A. E n) (falsel' N).
cal_forallr' :
   ca' A (\p:pos A. forallr' (\a:i. \p1:pos (B1 a). D1 p a p1) P)
      (\n:neg A. E n) (forallr' (\a:i. \p:pos (B1 a). F1 a p) P)
      <- (Pi a:i. Pi p1:pos (B1 a).
             ca' A (\p:pos A. D1 p a p1) (\n:neg A. E n) (F1 a p1)).
cal_foralll' :
   ca' A (\p:pos A. foralll' T' (\n:neg (A1 T'). D1 p n) N) (\n:neg A. E n)
      (foralll' T' (\n:neg (A1 T'). F1 n) N)
      <- (Pi n1:neg (A1 T'). ca' A (\p:pos A. D1 p n1) (\n:neg A. E n) (F1 n1)).
cal_existsr' :
   ca' A (\p:pos A. existsr' T' (\p1:pos (A1 T'). D1 p p1) P) (\n:neg A. E n)
      (existsr' T' (\p:pos (A1 T'). F1 p) P)
      <- (Pi p1:pos (A1 T'). ca' A (\p:pos A. D1 p p1) (\n:neg A. E n) (F1 p1)).
cal_existsl' :
   ca' A (\p:pos A. existsl' (\a:i. \n:neg (B1 a). D1 p a n) N) (\n:neg A. E n)
      (existsl' (\a:i. \n:neg (B1 a). F1 a n) N)
      <- (Pi a:i. Pi n1:neg (B1 a).
             ca' A (\p:pos A. D1 p a n1) (\n:neg A. E n) (F1 a n1)).




conc* : o -> type.
cut* : Pi A:o. conc* C <- (hyp A -> conc* C) <- conc* A.
axiom* : conc* A <- hyp A.
andr* : conc* (A and B) <- conc* B <- conc* A.
andl1* : conc* C <- hyp (A and B) <- (hyp A -> conc* C).
andl2* : conc* C <- hyp (A and B) <- (hyp B -> conc* C).
impr* : conc* (A imp B) <- (hyp A -> conc* B).
impl* : conc* C <- hyp (A imp B) <- (hyp B -> conc* C) <- conc* A.
orr1* : conc* (A or B) <- conc* A.
orr2* : conc* (A or B) <- conc* B.
orl* : conc* C <- hyp (A or B) <- (hyp B -> conc* C) <- (hyp A -> conc* C).
notr* : conc* (not A) <- (Pi p:o. hyp A -> conc* p).
notl* : conc* C <- hyp (not A) <- conc* A.
truer* : conc* true.
falsel* : conc* C <- hyp false.
forallr* : conc* (forall (\t:i. A t)) <- (Pi a:i. conc* (A a)).
foralll* :
   Pi T':i. conc* C <- hyp (forall (\t:i. A t)) <- (hyp (A T') -> conc* C).
existsr* : Pi T':i. conc* (exists (\t:i. A t)) <- conc* (A T').
existsl* :
   conc* C <- hyp (exists (\t:i. A t)) <- (Pi a:i. hyp (A a) -> conc* C).
@' : type.
cut^ : @' <- (neg A -> @') <- (pos A -> @').
axiom^ : @' <- pos A <- neg A.
andr^ : @' <- pos (A and B) <- (pos B -> @') <- (pos A -> @').
andl1^ : @' <- neg (A and B) <- (neg A -> @').
andl2^ : @' <- neg (A and B) <- (neg B -> @').
impr^ : @' <- pos (A imp B) <- (neg A -> pos B -> @').
impl^ : @' <- neg (A imp B) <- (neg B -> @') <- (pos A -> @').
orr1^ : @' <- pos (A or B) <- (pos A -> @').
orr2^ : @' <- pos (A or B) <- (pos B -> @').
orl^ : @' <- neg (A or B) <- (neg B -> @') <- (neg A -> @').
notr^ : @' <- pos (not A) <- (neg A -> @').
notl^ : @' <- neg (not A) <- (pos A -> @').
truer^ : @' <- pos true.
falsel^ : @' <- neg false.
forallr^ : @' <- pos (forall (\t:i. A t)) <- (Pi a:i. pos (A a) -> @').
foralll^ : Pi T':i. @' <- neg (forall (\t:i. A t)) <- (neg (A T') -> @').
existsr^ : Pi T':i. @' <- pos (exists (\t:i. A t)) <- (pos (A T') -> @').
existsl^ : @' <- neg (exists (\t:i. A t)) <- (Pi a:i. neg (A a) -> @').
ce : Pi C:o. conc* C -> conc C -> type.
ce_cut :
   ce (cut* A D1* (\h:hyp A. D2* h)) D
      <- ce D1* D1
      <- (Pi h1:hyp A. ce (D2* h1) (D2 h1))
      <- ca A D1 (\h:hyp A. D2 h) D.
ce_axiom : ce (axiom* H) (axiom H).
ce_andr : ce (andr* D1* D2*) (andr D1 D2) <- ce D1* D1 <- ce D2* D2.
ce_andl1 :
   ce (andl1* (\h:hyp A. D1* h) H) (andl1 (\h:hyp A. D1 h) H)
      <- (Pi h1:hyp A. ce (D1* h1) (D1 h1)).
ce_andl2 :
   ce (andl2* (\h:hyp B. D2* h) H) (andl2 (\h:hyp B. D2 h) H)
      <- (Pi h2:hyp B. ce (D2* h2) (D2 h2)).
ce_impr :
   ce (impr* (\h:hyp A. D1* h)) (impr (\h:hyp A. D1 h))
      <- (Pi h1:hyp A. ce (D1* h1) (D1 h1)).
ce_impl :
   ce (impl* D1* (\h:hyp B. D2* h) H) (impl D1 (\h:hyp B. D2 h) H)
      <- ce D1* D1
      <- (Pi h2:hyp B. ce (D2* h2) (D2 h2)).
ce_orr1 : ce (orr1* D1*) (orr1 D1) <- ce D1* D1.
ce_orr2 : ce (orr2* D2*) (orr2 D2) <- ce D2* D2.
ce_orl :
   ce (orl* (\h:hyp A. D1* h) (\h:hyp B. D2* h) H)
      (orl (\h:hyp A. D1 h) (\h:hyp B. D2 h) H)
      <- (Pi h1:hyp A. ce (D1* h1) (D1 h1))
      <- (Pi h2:hyp B. ce (D2* h2) (D2 h2)).
ce_notr :
   ce (notr* (\p:o. \h:hyp A. D1* p h)) (notr (\p:o. \h:hyp A. D1 p h))
      <- (Pi p:o. Pi h1:hyp A. ce (D1* p h1) (D1 p h1)).
ce_notl : ce (notl* D1* H) (notl D1 H) <- ce D1* D1.
ce_truer : ce truer* truer.
ce_falsel : ce (falsel* H) (falsel H).
ce_forallr :
   ce (forallr* (\a:i. D1* a)) (forallr (\a:i. D1 a))
      <- (Pi a:i. ce (D1* a) (D1 a)).
ce_foralll :
   ce (foralll* T' (\h:hyp (A1 T'). D1* h) H)
      (foralll T' (\h:hyp (A1 T'). D1 h) H)
      <- (Pi h1:hyp (A1 T'). ce (D1* h1) (D1 h1)).
ce_existsr : ce (existsr* T' D1*) (existsr T' D1) <- ce D1* D1.
ce_existsl :
   ce (existsl* (\a:i. \h:hyp (A1 a). D1* a h) H)
      (existsl (\a:i. \h:hyp (A1 a). D1 a h) H)
      <- (Pi a:i. Pi h1:hyp (A1 a). ce (D1* a h1) (D1 a h1)).
ce' : @' -> # -> type.
ce_cut' :
   ce' (cut^ (\p:pos A. D p) (\n:neg A. E n)) F
      <- (Pi p:pos A. ce' (D p) (D' p))
      <- (Pi n:neg A. ce' (E n) (E' n))
      <- ca' A (\p:pos A. D' p) (\n:neg A. E' n) F.
ce_axiom' : ce' (axiom^ N P) (axiom' N P).
ce_andr' :
   ce' (andr^ (\p:pos A2. D1 p) (\p:pos A1. D2 p) P)
      (andr' (\p:pos A2. D1' p) (\p:pos A1. D2' p) P)
      <- (Pi p1:pos A2. ce' (D1 p1) (D1' p1))
      <- (Pi p2:pos A1. ce' (D2 p2) (D2' p2)).
ce_andl1' :
   ce' (andl1^ (\n:neg A1. N1 n) N) (andl1' (\n:neg A1. N1' n) N)
      <- (Pi n1:neg A1. ce' (N1 n1) (N1' n1)).
ce_andl2' :
   ce' (andl2^ (\n:neg A1. N2 n) N) (andl2' (\n:neg A1. N2' n) N)
      <- (Pi n2:neg A1. ce' (N2 n2) (N2' n2)).
ce_impr' :
   ce' (impr^ (\n:neg A1. \p:pos A2. D1 n p) P)
      (impr' (\n:neg A1. \p:pos A2. D1' n p) P)
      <- (Pi n1:neg A1. Pi p2:pos A2. ce' (D1 n1 p2) (D1' n1 p2)).
ce_impl' :
   ce' (impl^ (\p:pos A2. D1 p) (\n:neg A1. D2 n) N)
      (impl' (\p:pos A2. D1' p) (\n:neg A1. D2' n) N)
      <- (Pi p1:pos A2. ce' (D1 p1) (D1' p1))
      <- (Pi n2:neg A1. ce' (D2 n2) (D2' n2)).
ce_orr1' :
   ce' (orr1^ (\p:pos A1. D1 p) P) (orr1' (\p:pos A1. D1' p) P)
      <- (Pi p1:pos A1. ce' (D1 p1) (D1' p1)).
ce_orr2' :
   ce' (orr2^ (\p:pos A1. D2 p) P) (orr2' (\p:pos A1. D2' p) P)
      <- (Pi p2:pos A1. ce' (D2 p2) (D2' p2)).
ce_orl' :
   ce' (orl^ (\n:neg A2. D1 n) (\n:neg A1. D2 n) N)
      (orl' (\n:neg A2. D1' n) (\n:neg A1. D2' n) N)
      <- (Pi n1:neg A2. ce' (D1 n1) (D1' n1))
      <- (Pi n2:neg A1. ce' (D2 n2) (D2' n2)).
ce_notr' :
   ce' (notr^ (\n:neg A1. D1 n) P) (notr' (\n:neg A1. D1' n) P)
      <- (Pi n1:neg A1. ce' (D1 n1) (D1' n1)).
ce_norl' :
   ce' (notl^ (\p:pos A1. D1 p) N) (notl' (\p:pos A1. D1' p) N)
      <- (Pi p1:pos A1. ce' (D1 p1) (D1' p1)).
ce_truer' : ce' (truer^ P) (truer' P).
ce_falsel' : ce' (falsel^ N) (falsel' N).
ce_forallr' :
   ce' (forallr^ (\a:i. \p:pos (A1 a). D1 a p) P)
      (forallr' (\a:i. \p:pos (A1 a). D1' a p) P)
      <- (Pi a:i. Pi p1:pos (A1 a). ce' (D1 a p1) (D1' a p1)).
ce_foralll' :
   ce' (foralll^ T' (\n:neg (A1 T'). D1 n) N)
      (foralll' T' (\n:neg (A1 T'). D1' n) N)
      <- (Pi n1:neg (A1 T'). ce' (D1 n1) (D1' n1)).
ce_existsr' :
   ce' (existsr^ T' (\p:pos (A1 T'). D1 p) P)
      (existsr' T' (\p:pos (A1 T'). D1' p) P)
      <- (Pi p1:pos (A1 T'). ce' (D1 p1) (D1' p1)).
ce_existsl' :
   ce' (existsl^ (\a:i. \n:neg (A1 a). D1 a n) N)
      (existsl' (\a:i. \n:neg (A1 a). D1' a n) N)
      <- (Pi a:i. Pi n1:neg (A1 a). ce' (D1 a n1) (D1' a n1)).
