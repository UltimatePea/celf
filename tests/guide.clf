i : type.
o : type.
imp : o <- o <- o.
and : o <- o <- o.
true : o.
or : o <- o <- o.
false : o.
forall : o <- (i -> o).
exists : o <- (i -> o).
not : o -> o = \A:o. A imp false.
nd : o -> type.
impi : nd (A imp B) <- (nd A -> nd B).
impe : nd B <- nd A <- nd (A imp B).
andi : nd (A and B) <- nd B <- nd A.
ande1 : nd A <- nd (A and B).
ande2 : nd B <- nd (A and B).
truei : nd true.
ori1 : nd (A or B) <- nd A.
ori2 : nd (A or B) <- nd B.
ore : nd C <- (nd B -> nd C) <- (nd A -> nd C) <- nd (A or B).
falsee : nd C <- nd false.
foralli : nd (forall (\t:i. A t)) <- (Pi x:i. nd (A x)).
foralle : (Pi T':i. nd (A T')) <- nd (forall (\t:i. A t)).
existsi : Pi T':i. nd (exists (\t:i. A t)) <- nd (A T').
existse : nd C <- (Pi x:i. nd (A x) -> nd C) <- nd (exists (\t:i. A t)).
noti : Pi A:o. (nd A -> nd false) -> nd (not A)
   = \A:o. \D:nd A -> nd false. impi (\d:nd A. D d).
note : Pi A:o. nd (not A) -> nd A -> nd false
   = \A:o. \D:nd (not A). \E:nd A. impe D E.


red : Pi A:o. nd A -> nd A -> type.
impred : red (impe (impi (\d:nd A2. D d)) E) (D E).
andred1 : red (ande1 (andi D E)) D.
andred2 : red (ande2 (andi D E)) E.
orred1 : red (ore (ori1 D) (\d:nd A2. E1 d) (\d:nd A3. E2 d)) (E1 D).
orred2 : red (ore (ori2 D) (\d:nd A2. E1 d) (\d:nd A3. E2 d)) (E2 D).
forallred : red (foralle (foralli (\x:i. D x)) T') (D T').
existsred : red (existse (existsi T' D) (\x:i. \d:nd (A2 x). E x d)) (E T' D).
trivI : (Pi A:o. nd (A imp A)) -> type.
% skolem trivI#1 : Pi A:o. nd (A imp A).
list : type.
nil : list.
cons : list <- list <- o.
append : list -> list -> list -> type.
appNil : append nil K K.
appCons : append (cons A L) K (cons A M) <- append L K M.
tp : type.
arrow : tp <- tp <- tp.
exp : type.
lam : exp <- (exp -> exp).
app : exp <- exp <- exp.
of : exp -> tp -> type.
tp_lam :
   of (lam (\e:exp. E e)) (arrow T1 T2) <- (Pi x:exp. of x T1 -> of (E x) T2).
tp_app : of (app E1 E2) T1 <- of E1 (arrow T2 T1) <- of E2 T2.
eval : exp -> exp -> type.
ev_lam : eval (lam (\e:exp. E e)) (lam (\e:exp. E e)).
ev_app :
   eval (app E1 E2) V
      <- eval E1 (lam (\e:exp. E1' e))
      <- eval E2 V2
      <- eval (E1' V2) V.

tps : Pi E:exp. Pi V:exp. Pi T':tp. eval E V -> of E T' -> of V T' -> type.
tps_lam :
   tps ev_lam (tp_lam (\x:exp. \p:of x T1. P x p))
      (tp_lam (\x:exp. \p:of x T1. P x p)).
tps_app :
   tps (ev_app D3 D2 D1) (tp_app P2 P1) Q
      <- tps D1 P1 (tp_lam (\x:exp. \p:of x T2. Q1' x p))
      <- tps D2 P2 Q2
      <- tps D3 (Q1' V2 Q2) Q.
tpsa : Pi E:exp. Pi V:exp. Pi T':tp. eval E V -> of E T' -> of V T' -> type.
% skolem tpsa#1 :
   Pi E:exp. Pi V:exp. Pi T':tp. Pi D:eval E V. Pi P:of E T'. of V T'.
e0 : exp = app (lam (\x:exp. x)) (lam (\y:exp. y)).
p0 : Pi T1:tp. of e0 (arrow T1 T1)
   = \T1:tp.
        tp_app (tp_lam (\x:exp. \p:of x T1. p))
           (tp_lam (\x:exp. \p:of x (arrow T1 T1). p)).
d0 : eval e0 (lam (\e:exp. e)) = ev_app ev_lam ev_lam ev_lam.
tps0 : Pi T1:tp. tps d0 p0 (tp_lam (\x:exp. \p:of x T1. p))
   = \T1:tp. tps_app tps_lam tps_lam tps_lam.
cp : exp -> exp -> type.
cp_app : cp (app E1 E2) (app F1 F2) <- cp E1 F1 <- cp E2 F2.
cp_lam :
   cp (lam (\x:exp. E x)) (lam (\x:exp. F x))
      <- (Pi x:exp. cp x x -> cp (E x) (F x)).

cpt : Pi E:exp. Pi F:exp. cp E F -> type.
% skolem cpt#1 : Pi E:exp. exp.
% skolem cpt#2 : Pi E:exp. cp E (cpt#1 E).
