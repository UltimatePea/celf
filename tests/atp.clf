% Automated theorem proving in first-order logic
% Authors: Carsten Schuermann and Anders Schack Nielsen
% following the atp lollimon example (Jeff Polakow)

trm : type.
atm : type.
frm : type.

i : atm -> frm.
true : frm.
false : frm.
and : frm -> frm -> frm.
or  : frm -> frm -> frm.
imp : frm -> frm -> frm.
all : (trm -> frm) -> frm.
some : (trm -> frm) -> frm.

hyp : frm -> type.
void : type.

hfalse : hyp false -o {Exists u:void. 1}.
% This line looks funny, we would like an empty type.  Do we have 0? -- cs Sat Dec 15 00:36:44 2007

hand   : hyp (and A B) -o {Exists u: {hyp A @ hyp B}. 1}.
hor1   : hyp (or A B) -o {Exists u: hyp A. 1 @ Exists v:hyp B.1}.
% This doesn't sound right either, talk to Anders. -- cs Sat Dec 15 00:38:44 2007

himp   : hyp A -o hyp (imp A B) -o {Exists u:hyp B. 1}.
hall   : hyp (all A) -o {Exists u : (Pi x:trm. hyp (A x)). 1}.
hsome  : hyp (some A) -o {Exists u: {Exists x:trm.  hyp (A x)}. 1}.
 
prove : frm -> type.
prand : prove (and A B) <- prove A & prove B.
pror1 : prove (or A B) <- prove A.
pror2 : prove (or A B) <- prove B.
primp : prove (imp A B) <- (hyp A -> prove B).
prall : prove (all A) <- (Pi x:trm. prove (A x)).
prsome : prove (some A) <- {Exists x:trm. prove (A x)}.
prtrue : prove true.
pri   : prove (i A) <- {hyp (i A)}.

% Example 
p : trm -> atm. 
q : trm -> atm.
a : atm. 
b : atm.
i : trm. 
j : trm.


#query 1 2 1 prove (imp (i a) (i a)).

#query 1 2 1
prove (imp (and (i a) (imp (i a) false)) (i (p i))).

#query 1 2 1
prove (imp (i a) (or (i (p i)) (i a))).

#query 0 1 1
prove (imp (and (i a) (imp (i a) (i a))) (i b)).

#query 1 2 1
prove (imp (all \x. imp (i (p x)) (i(q x))) (imp (i(p i)) (some \ y.i(q y)))).

#query 1 2 1 
prove (imp (all \x. imp (i (p x)) (i(q x))) (some \y.  imp (i(p y)) (i(q y)))).
